.data
screen: .word 0x10000000 			# Find where screen is located
pixel: 	.word 1024				# Stores the number of pixels in the screen
key:	.word 0xffff0004			# Stores keyboard input
end:	.word 0x10000c0c 			# you lose if aliens reach this (address of cell #771)
green:  .word 0x0000ff00
red:	.word 0x00ff0000
blue:	.word 0x000000ff
black:	.word 0x00000000
white:	.word 0x00ffffff	
yellow:	.word 0x00ffff00	
shipLocation:	.word 0x10000dbc
rightBarrier:	.word 0x10000df8
leftBarrier:	.word 0x10000d84

.text

initialization:
	lw	$s0, shipLocation 
	li 	$v0,30
	syscall
	move 	$s1, $a0 		# s1 will store system start time
	li 	$s2, 0			# s2 will store miliseconds since start
	li	$s3, 0			# s3 will be the time since bullet was last updated
	li	$s4, 0			# s4 will be the time since last bullet was fired by the player
	li	$s5, 1			# s5 is used for direction of aliens movement: right =1, left =0
	li	$s6, 0			# s6 will be the invader update time
	j 	invaderFirstDraw
	
main:	
	jal	timer
	jal	player
	jal	invader
	jal 	bullet
	j 	main	


 ############### (1.0) - PLAYER BLOCK ###############
#----------------------------------------------------#
# Functional Block 1: This block handles all of the logic for the player (conditionals, movements,lives, etc,).

player:

playerInit:
#$t0 - used to store key presses
#$t1 - rightBarrier
#$t2 - leftBarrier
#$t3 - Miscellaneous, used as needed (color, random, etc.) 
#$t4 - Stores previous ship location for erasing.

	lw	$t0, key			# t0 storing keyboard input
	lw	$t1, rightBarrier
	lw	$t2, leftBarrier
	li	$t3, 2				# Make t3 an unused value
	lw	$t4, shipLocation		# This register used for storing previous ship location

	# Storing return address 
	addi	$sp, $sp, -4	
	sw	$ra, 0($sp)			
	
playerMain:

	lw	$t0, key 			# Updates key press
	lw	$t0, ($t0)
	
	jal	checkCond
	#jal	lives
	#jal	collision
	
drawPlayer:

	# Drawing the moved player ship	
	lw	$t3, green
	sw	$t3,($s0)
	sw	$t3,124($s0)
	sw	$t3,128($s0)
	sw	$t3,132($s0)
	
	# Erasing the previous player ship
	#lw	$t3, black
	#sw	$t3, ($t4)
	#sw	$t3, 124($t4)
	#sw	$t3, 128($t4)
	#sw	$t3, 132($t4)
	
	# Restoring correct return address
	lw	$ra, 0($sp)
	jr	$ra
	
	
 ############### (1.1) - CHECK CONDITIONAL BLOCK ############### 
#---------------------------------------------------------------# 
#$t0 contains the key press
#$t2 used as reset register for buttonPress function


checkCond:
	beq	$t0, 0x00000020, condSpace 	# if else statements for keyboard input
 	beq	$t0, 0x00000061, condA
 	beq	$t0, 0x00000064, condD
 	beq	$t0, 0x0000001B, condEsc	# Escape, terminates the program
	
	j	endCon 				

condA:		
 	beq	$s0, $t2, endCon 		# Checking if hit the right barrier, jumps to the conditional escape
 	add	$t4, $s0, $zero
 	subi	$s0, $s0, 4			# Move character one unit to the right
 	j 	eraseShip
 
condD:
	beq	$s0, $t1, endCon 		# Checking if hit the left barrier, jumps to the conditional escape
	add	$t4, $s0, $zero
 	addi	$s0, $s0, 4			# Move character one unit to the left
 	j	eraseShip
 		
condSpace:
	lw	$t3, blue
	sw	$t3, -128($s0)
	j	buttonReset
	
condEsc:
	j	exit

endCon:
	jr	$ra				# Should return to "playerMain"
	
eraseShip:
# This block erases the pixels at the previous ship location after movement occurs
	lw	$t3, black
	sw	$t3, ($t4)
	sw	$t3, 124($t4)
	sw	$t3, 128($t4)
	sw	$t3, 132($t4)
	j	buttonReset	
	
buttonReset:
# Resets the value stored in the "key" memory location; provides push-button functionality. 
	li	$t3, 2
	li	$a3, 0xffff0004  		# Store the key input address in a3
	sw	$t3, 0($a3) 			# Change the input value to t3
	j 	main
			



 ############### (2.0) - Bullets & Collision ############### 
#-----------------------------------------------------------#
#Functional Block 2: This block handles all of the logic for the bullets (movement, triggers etc.) and the subsequent collision detections


bullet:
# This block works, generally, by looping through every pixel on the screen. Whenever a blue or red pixel is found (player and invader bullets respectively),
# they are moved either up or down one pixel (assuming no collision detection has happened).

bulletTimer:
# Checks the time since bullet was last updated, then either updates the bullet or 
# returns to the main loop

	sub	$t0, $s2, $s3		# t0 is how many miliseconds since the bullet was last updated
	blt	$t0, 50, loopExit		# return to main if bullet update isn't ready (0.05 seconds)
	

bulletInit:
# $t0 - Used as a counter 
# $t1 - Designates the current pixel being looked at by the loop
# $t2 - Miscellaneous, used as needed (color comparisons) 
# $t3 - Stores color value of current pixel, ($t1), for comparisons
	
		li	$t0, 0			# t0 will be the loop counter
		add	$s3, $s2, $zero		# Save bullet update time
		
	loop:
		beq 	$t0, 4096, loopExit	# There are 4096/4 pixels on the screen
		lw	$t1, screen		
		add	$t1, $t1, $t0		# Add pixel counter to screen address to get current pixel address
		
		lw	$t2, blue		# Get blue
		lw	$t3, ($t1)		# Get current pixel color
		bne	$t2, $t3, else		# Skip to next loop if current pixel is not blue
		
		lw	$t2, black
		sw	$t2, ($t1)		# Replace current bullet location with black1
		lw	$t2, screen
		addi	$t2, $t2, 128
		ble	$t1, $t2, loopExit	# If bullet is at top of screen, skip redrawing it higher
		lw	$t2, blue
		sw	$t2, -128($t1)
		
		else:
		addi	$t0, $t0, 4
		j 	loop
		
	loopExit:
		jr	$ra
		

  ############### (3.0) - INVADER BLOCK ###############
#----------------------------------------------------#
# Functional Block 3: This block handles all the logic the space invaders
 
invader:
# 1. Draws top and bottom borders (used for border detections)
# 2. Draws four rows of nine aliens (36 total)
# 3. Starts alien movement
#    -> Alien movement is done by looping through every pixel on the screen. Whenever a white pixel (an alien) is encountered, the subsequent movement of said 
#	is executed depending on a set of logic (right, left, down etc.)

invaderInit:
# Register List:
# $t0 - Designates current pixel being looked at by loop.
# $t1 - Used as a counter (stores amount of pixels in screen)
# $t2 - Miscellaneous, used as needed (colors, randoms, etc.)
# $t3 - Unused currently
# $t4 -	Movement flag (1 = Right, 0 = Left)
# $t5 - Unused currently
# $t6 - Color of previous pixel (for comparisons)
# $t7 - Color of current pixel (for comparisons)

 	lw	$t0, screen 			# Pixel that is being drawn
 	lw	$t1, pixel			# How many pixels are left
 	lw	$t2, white	 		# Colour (white) 0x00RRGGBB
 	sub	$t3, $s2, $s6			# t0 is how many miliseconds since the bullet was last updated
 	
 	
	blt	$t3, 1000, movementEnd
 	
			
invaderMain:
	
	add	$s6, $s2, $zero		# Save bullet update time
	j	cursorColumnSelection

movementIndicator:
# PURPOSE: picks which way the aliens should move
	lw	$t0, screen			# Resets cursor to bottom right of screen
	addi	$t0, $t0, 4096
	li	$t1, 1024			# Resets pixel count
	beqz	$s5, moveAliensL		# Keeps aliens moving in the same direction
	bgtz	$s5, moveAliensR
	
	
moveAliensR:
# PURPOSE: Checks if current cell is alien

	li	$s5, 1				# movement direction, 1 = right, 0 = left
	beqz	$t1, movementEnd		# if you've looped over every single pixel, go back to sleep (maybe needs checking?)
	lw 	$t7, ($t0)	 		# store the color of current cell 
	lw	$t6, -4($t0) 			# store the color of the previous cell
	beq	$t6, 0x00ffffff, moveOneAlienR 	# if the current pixel is white (an alien) go to moveOneAlien
		
	# if the current pixel is not white, go to the next cell (the next one over <- this way)
	subi	$t0, $t0, 4			# if the previous cell isn't white, move to next cell ( <- this way)
	subi	$t1, $t1, 1			# decerement cell count by 1
	j	moveAliensR			# go back to checking if the cell is white or not
		
								
	moveOneAlienR:
	# PURPOSE: Sets previous pixel to black and current to white

		lw	$t2, white	 	# load in the color white to the register t2
		sw	$t2, ($t0)		# color the current cell white (alien has now moved to the right)
		subi	$t0, $t0, 4		# go back to the previous pixel (the white one, place of the original alien)
		lw	$t2, black	 	# load in the color black to register t2
		sw	$t2, ($t0)		# color the cell black (effectively "deleting" the alien, which is now located in the cell to the right)
		subi	$t0, $t0, 4		# go to the next cell ( <- this direction)
		subi	$t1, $t1, 2		# increment cells checked by 2 (since you looked at 2 cells so far)
		j	moveAliensR		# go back to checking if the cell is white or not)
		

moveAliensL:
# PURPOSE: Checks if current cell is alien
	li	$s5, 0				# movement direction, 1 = right, 0 = left
	beqz	$t1, movementEnd		# if you've looped over every single pixel, go back to sleep (maybe needs checking?)
	lw 	$t7, ($t0)			# store the color in t7		
	beq	$t7, 0x00ffffff, moveOneAlienL 	# if the current pixel is white (an alien) go to moveOneAlien
	
	# if the current pixel is not white, go to the next cell (the next one over <- this way)
	subi	$t0, $t0, 4			# Moves cursor to the left
	subi	$t1, $t1, 1			# Decrement cell count by 1 
	j	moveAliensL			# go back to checking the cell
	
					
	moveOneAlienL:
	# PURPOSE: Sets previous pixel to white and current pixel to black
		lw	$t2, black		# Load black into register t2
		sw	$t2, ($t0)		# Colour the current cell black(alien is deleted)
		subi	$t0, $t0, 4		# Go to the next cell
		lw	$t2, white		# Load white into register t2
		sw	$t2, ($t0)		# Colour the cell white, (Moving alien to the left)
		subi	$t0, $t0, 4		# Go to the next cell
		subi	$t1, $t1, 2		# Imcrement cells checked by 2
		j	moveAliensL
			


cursorColumnSelection:
# PURPOSE: selects the columns to check, if the aliens are moving left, checks left column, if right, checks right column
	beqz	$s5, checkLeftBorder
	bgtz	$s5, checkRightBorder
	
checkRightBorder:
# PURPOSE: moves the cursor to the rightmost column in the play area
	lw	$t0, screen
	li	$t1, 30 			# pixel count (30 pixel (top to bottom is 32, -2 for the vorders))
	addi	$t0, $t0, 248
	j	checkColumn		

checkLeftBorder:
# PURPOSE: moves cursor to the leftmost column in the play area
	lw	$t0, screen
	li	$t1, 30 			# pixel count (30 pixel (top to bottom is 32, -2 for the vorders))
	addi	$t0, $t0, 132
	j	checkColumn
	
checkColumn:
# PURPOSE: checks the column selected by checkLeftBorder or checkRightBorder
	lw	$t2, end			# loads the cell that detects player loss
	lw	$t2, ($t2) 			# store the color of that end cell
	beq	$t2, 0x00ffffff, gameOverInit	# end the game if you find a white pixel	
	lw	$t7, ($t0)			# Storing color of the current cell
	beq	$t7, 0x00ffffff, checkAlienDown	# if the current cell is white, move it down
	subi	$t1, $t1, 1			# reduce number of cells looked at by 1
	addi	$t0, $t0, 128			# move to the next row in the column
	bgtz	$t1, checkColumn		# if the number of cells looked at is not yet 0, check again
	beqz	$t1, movementIndicator		# if the number of cells looked at is == 0, start moving the aliens
	
checkAlienDown:
# PURPOSE: initiates downwards movement for aliens
	lw	$t0, screen
	addi	$t0, $t0, 4096 			# goes to bottom of 
	li	$t1, 896			# sets the cell count to 1024-128, will cause errors otherwise 
	j	moveAlienDown			# start moving the aliens
	
movementIndicator2:
# PURPOSE: reverses alien direction directly after moving downwards
	lw	$t0, screen			# Resets cursor to bottom right of screen
	addi	$t0, $t0, 4096
	li	$t1, 1024
	beqz	$s5, moveAliensR		# if the previous flag was 0 (aliens moving left) start moving right
	bgtz	$s5, moveAliensL		# if the previous flag was 1 (aliens moving right) start moving left
	
moveAlienDown:
# PURPOSE: search the grid for aliens
	beqz	$t1, movementIndicator2 	# once you are done moving the aliens down, reverse direction
	lw	$t6, -128($t0)			# store the color of the cell above
	beq	$t6, 0x00ffffff, moveOneAlienD 	# if the previous pixel is an alien, move it down
	subi	$t0, $t0, 4			# move to the next cell ( <- this way)
	subi	$t1, $t1, 1
	j	moveAlienDown			# go back to checking whether the current cell is an alien

moveOneAlienD:
# PURPOSE: move the alien down
	li	$t2, 0x00ffffff
	sw	$t2, ($t0)			# color the current cell white (alien has now moved down)
	subi	$t0, $t0, 128
	li	$t2, 0x00000000
	sw	$t2, ($t0)			# color the previous cell black (alien has been removed from the previous position)
	addi	$t0, $t0, 124
	subi	$t1, $t1, 1
	j	moveAlienDown			# keep moving the aliens down

gameOverInit:
# PURPOSE: initialize game over sequence
	li	$t1, 1024			# initialize game over sequence
	lw	$t0, screen
	j	gameOver
		
gameOver:
# PURPOSE: draw entire screen in black and exit
	li	$t2, 0x00000000
 	sw	$t2, ($t0) 			# Draw colour($t2) on address $t0
	addi	$t0, $t0, 4 			# Move forward to last pixel on row
	subi	$t1, $t1, 1 			# Used to make sure $t1 is not 0
	bgtz	$t1, gameOver 			# if greater than 0, loop
	j 	exit

movementEnd:
	jr	$ra				# Should ret

																
																			
invaderFirstDraw:
# PURPOSE: handles the initial drawing of borders and aliens, only executes once at beginning.																							

# $t0 - Designates current pixel being looked at by loop.
# $t1 - Used as a counter (stores amount of pixels in screen)
# $t2 - Miscellaneous, used as needed (colors, randoms, etc.)
# $t3 - Unused currently
# $t4 -	Movement flag (1 = Right, 0 = Left)
# $t5 - Unused currently
# $t6 - Color of previous pixel (for comparisons)
# $t7 - color of current pixel (for comparisons)	

	
 	lw	$t0, screen 		# Pixel that is being drawn
 	lw	$t1, pixel		# How many pixels are left
 	lw	$t2, white	 	# Colour (white) 0x00RRGGBB
 	
 			
drawTopBars:
# PURPOSE: Draw the borders on the top of the screen

	lw	$t2, yellow		# load the color yellow into $t2
 	sw	$t2, ($t0)		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 4 		# Move forward to last pixel on row
	subi	$t1, $t1, 32 		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawTopBars 	#if greater than 0, loop
	
goToBottom:
# PURPOSE: Send the cursor to the bottom of the screen

	addi	$t0, $t0, 3840
	addi	$t1, $t1, 1024
	
drawBottomBar:
# PURPOSE: Draw the bottom borders

	lw	$t2, yellow		# load the color yellow into $t2
 	sw	$t2, ($t0) 		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 4		# Move forward to last pixel on row
	subi	$t1, $t1, 32		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawBottomBar 	#if greater than 0, loop
	
goTo392:
# PUPROSE: Go to the address 392, (position of first alien to be drawn)

	li	$t0, 0x10000188		# goto address 392
	addi	$t1, $t1, 9

drawAliens1:
# PURPOSE: Draw the first row of aliens

	lw	$t2, white		# load the color white into $t2
	sw	$t2, ($t0) 		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 8 		# Move forward to last pixel on row
	subi	$t1, $t1, 1 		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawAliens1 	#if greater than 0, loop
	
gotoNRow:
# PURSPOSE: Goes to the beginning of next alien row (Second row)
	addi	$t0, $t0, 184	
	addi	$t1, $t1, 9
	
drawAliens2:
# PURPOSE: Draws the second row of aliens

	lw	$t2, white		# load the color white in t2
	sw	$t2, ($t0) 		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 8 		# Move forward to last pixel on row
	subi	$t1, $t1, 1 		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawAliens2 	# if greater than 0, loop
	 
gotoNNRow:
# PURPOSE: Goes to begininng of the third alien row

	addi	$t0, $t0, 184
	addi	$t1, $t1, 9
	
drawAliens3:
# PURPOSE: Draws the thrid row of aliens

	lw	$t2, white		# load the color white in t2
	sw	$t2, ($t0) 		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 8		# Move forward to last pixel on row
	subi	$t1, $t1, 1 		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawAliens3 	#if greater than 0, loop

gotoNNNRow:
# PURPOSE: Goes to the begininng of the fourth row

	addi	$t0, $t0, 184
	addi	$t1, $t1, 9
	
drawAliens4:
# PURPOSE: Draw the fourth row of aliens
	lw	$t2, white		# load the color white in t2
	sw	$t2, ($t0) 		# Draw colour($t2) on address $t0
	addi	$t0, $t0, 8 		# Move forward to last pixel on row
	subi	$t1, $t1, 1 		# Used to make sure $t1 is not 0
	
	bgtz	$t1, drawAliens4 	# if greater than 0, loop
	
	j 	main
		
	
		
timer:
	li 	$v0,30
	syscall
	sub 	$s2, $a0, $s1
	
	move	$a0, $s2
	li 	$v0, 1
	syscall
	
	addi 	$a0, $0, 0xA 		# ascii code for LF, if you have any trouble try 0xD for CR.
        addi 	$v0, $0, 0xB		# syscall 11 prints the lower 8 bits of $a0 as an ascii character.
        syscall	
	
	jr	$ra			# return
		
					
exit:	
	li	$v0, 10 		#Terminate
	syscall	
		
		
		
		
		
		
		
		
		
		
		
		
		
