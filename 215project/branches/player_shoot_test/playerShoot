.data
screen: .word 0x10000000 #Find where screen is located
pixel: 	.word 3096
key:	.word 0xffff0004 #Stores keyboard input
green:  .word 0x0000ff00
red:	.word 0x00ff0000
blue:	.word 0x000000ff
black:	.word 0x00000000
shipLocation:	.word 0x10000ebc
rightBarrier:	.word 0x10000EF8
leftBarrier:	.word 0x10000e84

.text

initialization:
	lw	$s0, shipLocation
	li 	$v0,30
	syscall
	move 	$s1, $a0 		# s1 will store system start time
	li 	$s2, 0			# s2 will store miliseconds since start
	li	$s3, 0			# s3 will be the time since bullet was last updated
	li	$s4, 0			# s4 will be the time since last bullet was fired by the player

main:	
	jal	timer
	jal	player
	jal 	bullet

 ############### (1.0) - PLAYER BLOCK ###############
#----------------------------------------------------#
# Functional Block 1: This block handles all of the logic for the player (conditionals, movements,lives, etc,).

player:

playerInit:
#$t0 - used to store key presses
#$t1 - rightBarrier
#$t2 - leftBarrier
#$t3 - Miscellaneous, used as needed (color, random, etc.) 
#$t4 - Stores previous ship location for erasing.

	lw	$t0, key			# t0 storing keyboard input
	lw	$t1, rightBarrier
	lw	$t2, leftBarrier
	li	$t3, 2				# Make t3 an unused value
	lw	$t4, shipLocation		# This register used for storing previous ship location

	# Storing return address 
	addi	$sp, $sp, -4	
	sw	$ra, 0($sp)			
	
playerMain:

	lw	$t0, key 			# Updates key press
	lw	$t0, ($t0)
	
	jal	checkCond
	#jal	lives
	#jal	collision
	
drawPlayer:

	# Drawing the moved player ship	
	lw	$t3, green
	sw	$t3,($s0)
	sw	$t3,124($s0)
	sw	$t3,128($s0)
	sw	$t3,132($s0)
	
	# Erasing the previous player ship
	#lw	$t3, black
	#sw	$t3, ($t4)
	#sw	$t3, 124($t4)
	#sw	$t3, 128($t4)
	#sw	$t3, 132($t4)
	
	# Restoring correct return address
	lw	$ra, 0($sp)
	jr	$ra
	
	
 ############### (1.1) - CHECK CONDITIONAL BLOCK ############### 
#---------------------------------------------------------------# 
#$t0 contains the key press
#$t2 used as reset register for buttonPress function


checkCond:
	beq	$t0, 0x00000020, condSpace 	# if else statements for keyboard input
 	beq	$t0, 0x00000061, condA
 	beq	$t0, 0x00000064, condD
 	beq	$t0, 0x0000001B, condEsc	# Escape, terminates the program
	
	jr	$ra 				# Should return to "playerMain"

condA:		
 	beq	$s0, $t2, endCon 		# Checking if hit the right barrier, jumps to the conditional escape
 	add	$t4, $s0, $zero
 	subi	$s0, $s0, 4			# Move character one unit to the right
 	j 	eraseShip
 
condD:
	
	beq	$s0, $t1, endCon 		# Checking if hit the left barrier, jumps to the conditional escape
	add	$t4, $s0, $zero
 	addi	$s0, $s0, 4			# Move character one unit to the left
 	j	eraseShip
 	
condSpace:

	sub	$t0, $s2, $s4		# t0 is how many miliseconds since the bullet was last updated
	blt	$t0, 750, buttonReset	# skip if player can't fire yet
	add	$s4, $s2, $zero		# Save bullet fire time
	lw	$t3, blue
	sw	$t3, -128($s0)
	j	buttonReset
	
condEsc:
	j	exit

endCon:
	jr	$ra
	
eraseShip:
# This block erases the pixels at the previous ship location after movement
	lw	$t3, black
	sw	$t3, ($t4)
	sw	$t3, 124($t4)
	sw	$t3, 128($t4)
	sw	$t3, 132($t4)
	j	buttonReset	
	
buttonReset:
# Resets the value stored in the "key" memory location; provides push-button functionality. 
	li	$t3, 2
	li	$a3, 0xffff0004  		# Store the key input address in a3
	sw	$t3, 0($a3) 			# Change the input value to t3
	lw	$ra, 0($sp)
	jr	$ra
			
			
exit:	
	li	$v0, 10 #Terminate
	syscall


 ############### (2.0) - Bullets & Collision ############### 
#-----------------------------------------------------------#
#Functional Block 2: This block handles all of the logic for the bullets (movement, triggers etc.) and the subsequent collision detections


bullet:
# This block works, generally, by looping through every pixel on the screen. Whenever a blue or red pixel is found (player and invader bullets respectively),
# they are moved either up or down one pixel (assuming no collision detection has happened).

bulletTimer:
# Checks the time since bullet was last updated, then either updates the bullet or 
# returns to the main loop

	sub	$t0, $s2, $s3		# t0 is how many miliseconds since the bullet was last updated
	blt	$t0, 50, main		# return to main if bullet update isn't ready (0.05 seconds)
	

bulletInit:
# $t0 - Used as a counter 
# $t1 - Designates the current pixel being looked at by the loop
# $t2 - Miscellaneous, used as needed (color comparisons) 
# $t3 - Stores color value of current pixel, ($t1), for comparisons
	
		li	$t0, 0			# t0 will be the loop counter
		add	$s3, $s2, $zero		# Save bullet update time
		
	loop:
		beq 	$t0, 4096, loopExit	# There are 4096/4 pixels on the screen
		lw	$t1, screen		
		add	$t1, $t1, $t0		# Add pixel counter to screen address to get current pixel address
		
		lw	$t2, blue		# Get blue
		lw	$t3, ($t1)		# Get current pixel color
		bne	$t2, $t3, else		# Skip to next loop if current pixel is not blue
		
		lw	$t2, black
		sw	$t2, ($t1)		# Replace current bullet location with black1
		lw	$t2, screen
		addi	$t2, $t2, 128
		ble	$t1, $t2, loopExit	# If bullet is at top of screen, skip redrawing it higher
		lw	$t2, blue
		sw	$t2, -128($t1)
		
		else:
		addi	$t0, $t0, 4
		j 	loop
		
	loopExit:
		j	main
		
		
timer:
	li 	$v0,30
	syscall
	sub 	$s2, $a0, $s1	# Store time since start in s2
	
	#move	$a0, $s2
	#li 	$v0, 1
	#syscall
	
	#addi $a0, $0, 0xA #ascii code for LF, if you have any trouble try 0xD for CR.
        #addi $v0, $0, 0xB #syscall 11 prints the lower 8 bits of $a0 as an ascii character.
        #syscall
	
	jr	$ra
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
